{"version":3,"sources":["Components/Node.js","Components/OtherFunctions.js","Components/Line.js","Components/Field.js","Components/Prim.js","App.js","reportWebVitals.js","index.js"],"names":["Node","props","className","style","top","y","left","x","backgroundColor","color","onClick","createBridge","onDoubleClick","movenode","Triangle","firstNode","secondNode","triangle","A","B","C","id","undefined","a","Math","abs","b","c","beta","sqrt","pow","asin","PI","FindNodeIndexById","nodes","i","length","FindLineIndexById","lines","Line","height","transform","rotation","changeweight","marginTop","marginLeft","weight","toString","iPress","dPress","tPress","mousePos","newNodeId","newLineId","bridge","Field","useState","setNodes","setLines","consoleText","setConsoleText","delay","setDelay","setWeight","real","setReal","addConsoleLine","line","push","copyNodes","copyLines","console","log","calcLine","lowerNode","upperNode","createLine","Number","newLine","node1","node2","angle","coords","floor","changeLineColor","slice","changeNodeColor","executePrim","delayTime","interval","setInterval","cycle","startNode","random","usedNodes","tree","lastChecked","smallestLine","smallestLineWeight","Infinity","lineIndex","usedNodesIndex","startTime","Date","now","loops","checks","forEach","node","filter","clearInterval","Prim","moveNode","document","addEventListener","temp","moveSingleNode","once","map","isNaN","nodePress","changeWeight","Button","variant","InputGroup","FormControl","placeholder","onChange","e","replace","handleDelay","target","value","Text","display","flexDirection","handleWeight","type","name","for","Accordion","defaultActiveKey","Item","eventKey","Header","Body","row","window","preventDefault","code","clientX","clientY","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.a9d1d90f.chunk.js","sourcesContent":["export default function Node(props) {\n\n    return (\n        <span className=\"node\" style={{top: props.y, left: props.x, backgroundColor: props.color}} onClick={props.createBridge} onDoubleClick={props.movenode}>\n        </span>\n    )\n}","export function Triangle(firstNode, secondNode) {\n    let triangle = {\n        A: firstNode,\n        B: secondNode,\n        C: { x: firstNode.x, y: secondNode.y, id: undefined },\n        a: Math.abs(firstNode.x - secondNode.x),\n        b: Math.abs(firstNode.y - secondNode.y),\n        c: undefined,\n        beta: undefined\n    }\n    triangle.c = Math.sqrt(Math.pow(triangle.a, 2) + Math.pow(triangle.b, 2))\n    triangle.beta = Math.asin(triangle.a / triangle.c) * (180 / Math.PI)\n    if (firstNode.x > secondNode.x) {\n        triangle.beta = 360 - triangle.beta\n    }\n    return triangle\n}\n\nexport function FindNodeIndexById(id, nodes) {\n    for (let i = 0; i < nodes.length; i++) {\n        if (nodes[i].id === id) {\n            return i\n        }\n    }\n}\n\nexport function FindLineIndexById(id, lines) {\n    for (let i = 0; i < lines.length; i++) {\n        if (lines[i].id === id) {\n            return i\n        }\n    }\n}\n\nexport function Sleep(milliseconds) {\n    const date = Date.now();\n    let currentDate = null;\n    do {\n        currentDate = Date.now();\n    } while (currentDate - date < milliseconds);\n}","export default function Line(props) {\n    return (\n        <div className=\"line\" style={{top: props.y+9, left: props.x+9, height: props.length, transform: `rotate(${props.rotation}deg)`, backgroundColor: props.color}} onClick={props.changeweight}>\n            <p style={{\n                marginTop: `calc(${props.length+12}px/3)`,\n                transform: props.rotation > 180 ? `rotate(${90}deg)` : `rotate(${270}deg)`,\n                marginLeft: `${6-props.weight.toString().length*4}px`\n            }}>\n                {props.weight}\n            </p>\n        </div>\n    )\n}","import { useState } from 'react'\nimport Node from './Node.js'\nimport { FindLineIndexById, Triangle, FindNodeIndexById } from './OtherFunctions.js'\nimport { Prim } from './Prim.js';\nimport Line from './Line.js';\nimport copyLines from './lines.json';\nimport copyNodes from './nodes.json';\nimport { Button, Accordion, InputGroup, FormControl } from 'react-bootstrap';\nimport Kruskal from './Kruskal.js';\nimport reactDom from 'react-dom';\n\nvar iPress; var dPress; var tPress\nvar mousePos;\nvar newNodeId = 0; var newLineId = 0;\nvar bridge = { firstNode: undefined, secondNode: undefined };\n\nexport default function Field() {\n    const [nodes, setNodes] = useState([])\n    const [lines, setLines] = useState([])\n    const [consoleText, setConsoleText] = useState(['Console has been cleared'])\n    const [delay, setDelay] = useState(1)\n    const [weight, setWeight] = useState(50)\n    const [real, setReal] = useState(false)\n\n    const addConsoleLine = (line) => {\n        consoleText.push(line)\n    }\n\n    const clearField = () => {\n        setLines([])\n        setNodes([])\n    }\n\n    tPress = () => {\n        setNodes(copyNodes)\n        setLines(copyLines)\n        newNodeId = 9\n        newLineId = 16\n    }\n\n    iPress = () => {\n        console.log(nodes)\n        console.log(lines)\n    }\n\n    dPress = () => {\n        setNodes([...nodes, { x: mousePos.x, y: mousePos.y, id: newNodeId, lines: [], color: undefined }])\n        newNodeId++\n    }\n\n    const nodePress = (node) => {\n        if (bridge.firstNode === undefined) {\n            bridge.firstNode = node\n        } else if (bridge.secondNode === undefined) {\n            if (bridge.firstNode.id === node.id) {\n                bridge.firstNode = undefined\n                console.log('First point cannot be second point')\n                setConsoleText([...consoleText, 'First point cannot be second point'])\n            } else {\n                bridge.secondNode = node\n\n                if (isNaN(weight)) {\n                    setConsoleText([...consoleText, 'Weight can only contain digits!'])\n                } else {\n                    calcLine()\n                    setConsoleText([...consoleText, 'Calculating and drawing line with weight ' + weight + '...'])\n                }\n            }\n        } else {\n            console.log('Something went wrong')\n            setConsoleText([...consoleText, 'First point cannot be second point'])\n        }\n\n    }\n\n    const calcLine = () => {\n        let lowerNode\n        let upperNode\n        if (bridge.firstNode.y > bridge.secondNode.y) {\n            upperNode = bridge.firstNode\n            lowerNode = bridge.secondNode\n        } else {\n            upperNode = bridge.secondNode\n            lowerNode = bridge.firstNode\n        }\n        let triangle = Triangle(upperNode, lowerNode)\n        createLine(lowerNode, upperNode, triangle, Number(weight))\n    }\n\n    const createLine = (lowerNode, upperNode, triangle, weight) => {\n        let newLine = { id: newLineId, node1: lowerNode.id, node2: upperNode.id, length: triangle.c, angle: triangle.beta, weight: weight, coords: [lowerNode.x, lowerNode.y], color: undefined }\n        console.log(weight)\n        if (real) {\n            newLine = { id: newLineId, node1: lowerNode.id, node2: upperNode.id, length: triangle.c, angle: triangle.beta, weight: Math.floor(triangle.c), coords: [lowerNode.x, lowerNode.y], color: undefined }\n        }\n        setLines([...lines, newLine])\n        lowerNode.lines = [...lowerNode.lines, newLine]\n        upperNode.lines = [...upperNode.lines, newLine]\n        newLineId++\n        bridge = { firstNode: undefined, secondNode: undefined }\n    }\n\n    const changeLineColor = (id, color) => {\n        if (id !== null) {\n            lines[FindLineIndexById(id, lines)] = { ...lines[FindLineIndexById(id, lines)], color: color }\n            setNodes([...nodes, { x: mousePos.x, y: mousePos.y, id: newNodeId, lines: [] }])\n            setNodes(nodes.slice(0, nodes.length))\n        }\n    }\n\n    const changeNodeColor = (id, color) => {\n        nodes[FindNodeIndexById(id, nodes)] = { ...nodes[FindNodeIndexById(id, nodes)], color: color }\n        setNodes([...nodes, { x: mousePos.x, y: mousePos.y, id: newNodeId, lines: [] }])\n        setNodes(nodes.slice(0, nodes.length))\n    }\n\n    const executePrim = () => {\n        Prim(nodes, changeLineColor, changeNodeColor, delay, addConsoleLine)\n    }\n\n    const executeKruskal = () => {\n        Kruskal(addConsoleLine)\n    }\n\n    const handleDelay = (delay) => {\n        setDelay(delay.replace(/\\D/g, ''))\n    }\n\n    const handleWeight = (weight) => {\n        setWeight(weight.replace(/\\D/g, ''))\n    }\n\n    const changeWeight = (i) => {\n        let temp = lines\n        temp[i].weight = weight\n        setLines([...temp])\n        addConsoleLine(`Gave line new weight of ${weight}`)\n    }\n\n    const moveSingleNode = (i) => {\n        let temp = nodes\n        temp[i].x = mousePos.x\n        temp[i].y = mousePos.y\n        temp[i].lines.forEach(line => {\n            let upperNode\n            let lowerNode\n            let node1\n            let node2\n            console.log(temp[i])\n            console.log({node1: line.node1, node2: line.node2})\n            if (line.node1 === temp[i].id) {\n                node1 = temp[i]\n                node2 = nodes[FindNodeIndexById(line.node2, nodes)]\n            } else {\n                node2 = temp[i]\n                node1 = nodes[FindNodeIndexById(line.node1, nodes)]\n            }\n            console.log({node1: node1, node2: node2})\n            if (node1.y > node2.y) {\n                upperNode = node1\n                lowerNode = node2\n            } else {\n                upperNode = node2\n                lowerNode = node1\n            }\n            line.node1 = lowerNode.id\n            line.node2 = upperNode.id\n            let triangle = Triangle(upperNode, lowerNode)\n            line.length = triangle.c\n            line.angle = triangle.beta\n            line.coords = [lowerNode.x, lowerNode.y]\n        })\n        setNodes([...temp])\n    }\n\n    const moveNode = (i) => {\n        console.log(i)\n        document.addEventListener('click', () => moveSingleNode(i), {once: true})\n    }\n\n    \n    return (\n        <div className=\"field\">\n            {\n                nodes.map((node, i) =>\n                    <Node x={node.x} y={node.y} id={node.id} key={node.id} color={node.color} createBridge={() => nodePress(node)} movenode={() => moveNode(i)}/>\n                )\n            }\n            {\n                lines.map((line, i) => \n                    <Line x={line.coords[0]} y={line.coords[1]} id={line.id} key={line.id} length={line.length} rotation={line.angle} color={line.color} weight={line.weight} changeweight={() => changeWeight(i)}/>\n                )\n            }\n            <div className=\"button-flex\">\n                <Button variant=\"primary\" onClick={() => executePrim()} className='execute-prim'>Execute Prim algorithm</Button>\n                <Button variant=\"primary\" onClick={() => executeKruskal()} className='execute-kruskal'>Execute Kruskal algorithm</Button>\n                <Button variant=\"primary\" onClick={() => setConsoleText(['Console has been cleared'])} className='clear-console'>Clear console</Button>\n                <Button variant=\"primary\" onClick={() => clearField()} className='clear-field'>Clear field</Button>\n                <InputGroup className='delay-input'>\n                    <FormControl placeholder='Delay' onChange={(e) => handleDelay(e.target.value)}></FormControl>\n                    <InputGroup.Text>ms</InputGroup.Text>\n                </InputGroup>\n                <div style={{display: 'flex', flexDirection: 'row'}}>\n                <InputGroup>\n                    <FormControl placeholder='Weight' onChange={(e) => handleWeight(e.target.value)}></FormControl>\n                </InputGroup>\n                </div>\n                <div>\n                    <input type=\"checkbox\" name='real' onClick={() => setReal(!real)} />\n                    <label for='real' style={{marginLeft: '5px'}}>Use real lengths</label>\n                </div>\n            </div>\n            <Accordion defaultActiveKey='0'>\n                <Accordion.Item eventKey='0'>\n                    <Accordion.Header className='console-text'>Console</Accordion.Header>\n                    <Accordion.Body>\n                        {\n                            consoleText.map(row => <p className=\"console-text\">{\"> \" + row}</p>)\n                        }\n                    </Accordion.Body>\n                </Accordion.Item>\n            </Accordion>\n        </div>\n    )\n}\n\nwindow.addEventListener('keyup', (e) => {\n    e.preventDefault()\n    if (e.code === 'KeyD') {\n        dPress()\n    } else if (e.code === 'KeyI') {\n        iPress()\n    } else if (e.code === 'KeyT') {\n        tPress()\n    }\n})\n\nwindow.addEventListener('mousemove', (e) => {\n    e.preventDefault()\n    mousePos = { x: e.clientX - 10, y: e.clientY - 10 }\n})\n","import { FindNodeIndexById } from \"./OtherFunctions\"\n\nexport function Prim(nodes, changeLineColor, changeNodeColor, delayTime, addConsoleLine) {\n    const delay = delayTime\n    let interval = setInterval(() => cycle(), delay)\n    var startNode = nodes[Math.floor(Math.random()*nodes.length)]\n    var usedNodes = [startNode]\n    var tree = []\n    var lastChecked = { id: null }\n    var smallestLine = null\n    var smallestLineWeight = Infinity\n    var lineIndex = 0\n    var usedNodesIndex = 0\n    var startTime = Date.now()\n    var loops = 0\n    var checks = 0\n    nodes.forEach(node => {\n        changeNodeColor(node.id, 'black')\n        node.lines.forEach(line => {\n            changeLineColor(line.id, 'black')\n        })\n    })\n\n    changeNodeColor(startNode.id, 'red')\n    addConsoleLine('')\n    addConsoleLine('Starting the algorhitm')\n    addConsoleLine('Starting with node ' + startNode.id)\n    addConsoleLine('Program cycles every ' + delay + 'ms')\n    \n    const cycle = () => {\n        loops++\n        if (usedNodes.length < nodes.length) { // If program is not done yet\n            if (usedNodesIndex < usedNodes.length) { // If all used nodes are not looped\n                if (lineIndex < usedNodes[usedNodesIndex].lines.length) { // If not all the lines have been checked\n                    if (usedNodes.filter(node => usedNodes[usedNodesIndex].lines[lineIndex].node1 === node.id).length === 0 || usedNodes.filter(node => usedNodes[usedNodesIndex].lines[lineIndex].node2 === node.id).length === 0) { // If nodes are not in tree\n                        checks++\n                        if (tree.filter(line => lastChecked.id === line.id).length === 0) {\n                            changeLineColor(lastChecked.id, 'black') // Color last line black\n                        }\n                        changeLineColor(usedNodes[usedNodesIndex].lines[lineIndex].id, 'blue') // Color current line blue\n                        if (usedNodes[usedNodesIndex].lines[lineIndex].weight < smallestLineWeight) { // If current line is smallest one\n                            smallestLine = usedNodes[usedNodesIndex].lines[lineIndex] // Set smallest line to current line\n                            smallestLineWeight = usedNodes[usedNodesIndex].lines[lineIndex].weight // Set the weight to the current lowest weight\n                        }\n                        lastChecked = usedNodes[usedNodesIndex].lines[lineIndex]; // Set the last line to the current line\n                    }\n                    lineIndex++; // Check next line \n                } else { // If all the lines have been checked\n                    lineIndex = 0; // Reset the lines\n                    usedNodesIndex++; // Check next node\n                }\n            } else { // If all usedNodes have been checked\n                if (usedNodes.filter(node => node.id === smallestLine.node1).length > 0) { // If node 1 is already in the array\n                    usedNodes.push(nodes[FindNodeIndexById(smallestLine.node2, nodes)]); // Add node 2\n                    changeNodeColor(smallestLine.node2, 'red')\n                } else { // If node 2 is already in the array\n                    usedNodes.push(nodes[FindNodeIndexById(smallestLine.node1, nodes)]); // Add node 1\n                    changeNodeColor(smallestLine.node1, 'red')\n                }\n                tree.push(smallestLine);\n                changeLineColor(smallestLine.id, 'red')\n                if (lastChecked.id !== smallestLine.id) {\n                    changeLineColor(lastChecked.id, 'black')\n                }\n                smallestLine = null\n                smallestLineWeight = Infinity\n                usedNodesIndex = 0;\n                lineIndex = 0;\n            }\n        } else { // If it is done\n            addConsoleLine('')\n            addConsoleLine('Minimal spanning tree has been mapped')\n            addConsoleLine('Statistics:')\n            addConsoleLine('Execution took ' + (Date.now() - startTime).toString() + 'ms')\n            addConsoleLine('Program looped ' + loops + ' times')\n            addConsoleLine('It compared ' + checks + ' times')\n            tree.forEach(line => {\n                changeLineColor(line.id, 'red')\n            });\n            clearInterval(interval)\n        }\n    }\n}","import './App.css';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport Field from './Components/Field';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Field/>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}